// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean isBlack;
    static int screenStart, screenEnd;
    static Array bitArr;

    /** Initializes the Screen. */
    function void init() {
        let isBlack = true;
        let screenStart = 16384;
        let screenEnd = 24575;
        do Screen.initBitArray();
        return;
    }

    function void initBitArray(){
        var int i, base;
        let i = 0;
        let bitArr = Array.new(15);
        let bitArr[0] = 1;
        while(i<14){
            let bitArr[i+1] = bitArr[i] + bitArr[i];
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int start, end;
        let start = screenStart;
        let end = screenEnd + 1;
        while(start < end){
            do Memory.poke(start, 0);
            let start = start + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let isBlack = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int position, rowInRam, columnInRam, oldValue, address;

        let address = 32 * y + (x / 16);
        let oldValue = Memory.peek(address + screenStart);

        let columnInRam = position - (rowInRam * 16);
        let columnInRam = x - ((x / 16) * 16);
        if(oldValue & bitArr[columnInRam] = bitArr[columnInRam]){
            //进入这里，表示原来是黑色
            //如果画黑色，则不用处理
            if(~isBlack){
                //如果画白色
                do Memory.poke(address + screenStart, oldValue - bitArr[columnInRam]);
            }
        }else{
            //进入这里，表示原来是白色
            if(isBlack){
                //如果画黑色
                do Memory.poke(address + screenStart, oldValue + bitArr[columnInRam]);
            }
            //如果画白色，则不用处理
        }
        return;
    }

    function void drawHotizontalLine(int x, int y, int length){
        if(length > 0){
            while(length > -1){
                do Screen.drawPixel(x - length, y);
                let length = length - 1;
            }
        }else{
            while(length < -1){
                do Screen.drawPixel(x - length, y);
                let length = length + 1;
            }
        }
        return;
    }

    function void drawVerticalLine(int x, int y, int length){
        if(length > 0){
            while(length > -1){
                do Screen.drawPixel(x, y-length);
                let length = length - 1;
            }
        }else{
            while(length < -1){
                do Screen.drawPixel(x, y-length);
                let length = length + 1;
            }
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff;
        var boolean isEnd;

        //==================如果x或y相等，则画直线===============================
        if(x1 = x2){
            do Screen.drawVerticalLine(x1, y1, y1-y2);
            return;
        }

        if(y1 = y2){
            do Screen.drawHotizontalLine(x1, y1, x1-x2);
            return;
        }

        //==================如果x和y不相等，则画曲线===============================
        let dx = x2 - x1;
        let dy = y2 - y1;

        while(~(a>dx) & ~(b>dy)){
            do Screen.drawPixel(x1+a, y1+b);
            let diff = (a * dy) - (b * dx);
            if(diff > 0){
                let a = a + 1;
            }else{
                let b = b + 1;
            }
        }
        return;
    }

    function int nextRightSquare(int leftX, int leftY, int rightX, int rightY){
        return Screen.sinSquare(leftX+1, leftY, rightX, rightY);
    }

    function int sinSquare(int leftX, int leftY, int rightX, int rightY){
        var int xSquare, ySquare, sinSquare;
        let xSquare = (rightX - leftX) * (rightX - leftX);
        let ySquare =  (rightY - leftY) * (rightY - leftY);
        let sinSquare = ySquare / (xSquare + ySquare);
        return sinSquare;
    }



    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        do Screen.drawLine(x1, y1, x1, y2);
        do Screen.drawLine(x1, y1, y1, x2);
        do Screen.drawLine(x2, y2, x2, y1);
        do Screen.drawLine(x2, y2, x1, y2);
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int length;
        let length = r;
        while(length > -1){
            do Screen.drawLine(x-length, y+r-length, x+length, y+r-length);
            do Screen.drawLine(x-length, y-r+length, x+length, y-r+length);
            let length = length - 1;
        }
        return;
    }
}
