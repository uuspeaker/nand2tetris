// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // instruction[0]=0 表示A指令，表示A寄存器的地址需要更新，将instruction写入到A寄存器
    Mux16(a=instruction, b=ALUOutM, sel=instruction[0], out=ARegisterInput);
    Not(in=instruction[0], out=notIns0);
    ARegister(in=ARegisterInput, load=notIns0, out=ARegisterOutput);
    // instruction[3]=0表示将与A计算, =1表示将与M计算
    Mux16(a=ARegisterOutput, b=inM, sel=instruction[3], out=ALUInputAorM);

    ALU(x=DregisterOutput, y=ALUInputAorM,
      zx=instruction[4],
      nx=instruction[5],
      zy=instruction[6],
      ny=instruction[7],
      f=instruction[8],
      no=instruction[9],
      out=outM, out=ALUOutM, out[0]=lt0, out[0..7]=out8, out[8..15]=out16 zr=writeM, ng=)；

    // instruction[0]=1且instruction[10]=1表示A寄存器的值需要更新
    And(a=instruction[0], b=instruction[10], out=ins0andInst10);
    // instruction[0]=1且instruction[11]=1表示D寄存器的值需要更新
    And(a=instruction[0], b=instruction[11], out=ins0andInst11);
    DRegister(in=ALUOutM, load=ins0andInst11, out=DregisterOutput);

    //////////////////处理指令计数器
    //若instruction[13]，[14]，[15]均为0，这表示不跳转，下一指令为A=A+1
    DMux8Way(in=true, sel=instruction[13..15], a=inc, b=b, c=c, d=d, e=e, f=f, g=g, h=h);
    Or8Way(in=out8, out=or8);
    Or8Way(in=out16, out=or16);
    Or(a=or8, b=out16, out=orOut16);
    Not(a=true, b=false, in=orOut16, out=eq0)
    Not(in=eq0, out=ne0);
    Not(in=lt0, out=gt0);
    Or(a=le0, b=eq0, out=le0);
    Or(a=gt0, b=eq0, out=ge0);

    And(a=b, b=gt0, out=load1);
    And(a=c, b=eq0, out=load2);
    And(a=d, b=ge0, out=load3);
    And(a=e, b=lt0, out=load4);
    And(a=f, b=ne0, out=load5);
    And(a=g, b=le0, out=load6);
    And(a=h, b=true, out=load7);

    Or8Way(a=load1, b=load2, c=load3, d=load4, e=load5, f=load6, g=load7, h=false, out=load);


    PC(in=ARegisterOutput, load=load, inc=inc, reset=reset, out=pc);


}
