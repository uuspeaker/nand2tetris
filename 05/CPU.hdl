// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    ///////////////////// 更新A寄存器的值///////////////////////
    // A指令，instruction即为新的地址
    // C指令，且instruction[5]=1表示将ALU的结算结果当作新地址
    Not(in=instruction[15], out=isA);
    Not(in=isA, out=isC);
    Mux16(a=instruction, b=ALUOutM, sel=isC, out=ARegisterInput);
    // 判断地址是否需要更新
    And(a=isC, b=instruction[5], out=changeAddressForC);
    Or(a=isA, b=changeAddressForC, out=changeAddress);
    //根据判断情况将对应地址赋予A寄存器
    ARegister(in=ARegisterInput, load=changeAddress, out=ARegisterOutput, out[0..14]=addressM);

    ////////////////////////计算ALU////////////////////////////
    // C指令且instruction[12]=1，表示将与M计算
    And(a=isC, b=instruction[12], out=useM);
    Mux16(a=ARegisterOutput, b=inM, sel=useM, out=ALUInputAorM);
    ALU(x=DregisterOutput, y=ALUInputAorM,
      zx=instruction[11],
      nx=instruction[10],
      zy=instruction[9],
      ny=instruction[8],
      f=instruction[7],
      no=instruction[6],
      out=outM, out=ALUOutM, zr=eq0, ng=lt0);

    //////////////////更新DM寄存器的值/////////////////////////////
    // instruction[15]=1且instruction[4]=1表示D寄存器的值需要更新
    And(a=instruction[15], b=instruction[4], out=changeD);
    DRegister(in=ALUOutM, load=changeD, out=DregisterOutput);
    // instruction[15]=1且instruction[3]=1表示M寄存器的值需要更新
    And(a=instruction[15], b=instruction[3], out=writeM);

    //////////////////处理指令计数器/////////////////////////////

    DMux8Way(in=true, sel=instruction[0..2], a=aJmp, b=bJmp, c=cJmp, d=dJmp, e=eJmp, f=fJmp, g=gJmp, h=hJmp);
    //获取out值和0的大小关系
    Or(a=lt0, b=eq0, out=le0);
    Not(in=eq0, out=ne0);
    Not(in=lt0, out=ge0);
    Not(in=le0, out=gt0);
    //C指令时，若为以下7种情况之一则跳转到A寄存器指定的地址
    And(a=bJmp, b=gt0, out=load1);
    And(a=cJmp, b=eq0, out=load2);
    And(a=dJmp, b=ge0, out=load3);
    And(a=eJmp, b=lt0, out=load4);
    And(a=fJmp, b=ne0, out=load5);
    And(a=gJmp, b=le0, out=load6);
    And(a=hJmp, b=true, out=load7);

    Or8Way(in[0]=load1, in[1]=load2, in[2]=load3, in[3]=load4, in[4]=load5, in[5]=load6, in[6]=load7, in[7]=false, out=load8);
    And(a=isC, b=load8, out=load);

    PC(in=ARegisterOutput, load=load, inc=true, reset=reset, out[0..14]=pc);


}
